// Code generated by MockGen. DO NOT EDIT.
// Source: cipher.go
//
// Generated by this command:
//
//	mockgen -source=cipher.go -destination=mock_cipher/cipher.go
//

// Package mock_cipher is a generated GoMock package.
package mock_cipher

import (
	reflect "reflect"

	cipher "github.com/InsideGallery/core/pki"
	gomock "go.uber.org/mock/gomock"
)

// MockCipher is a mock of Cipher interface.
type MockCipher struct {
	ctrl     *gomock.Controller
	recorder *MockCipherMockRecorder
	isgomock struct{}
}

// MockCipherMockRecorder is the mock recorder for MockCipher.
type MockCipherMockRecorder struct {
	mock *MockCipher
}

// NewMockCipher creates a new mock instance.
func NewMockCipher(ctrl *gomock.Controller) *MockCipher {
	mock := &MockCipher{ctrl: ctrl}
	mock.recorder = &MockCipherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCipher) EXPECT() *MockCipherMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCipher) Decrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCipherMockRecorder) Decrypt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCipher)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockCipher) Encrypt(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCipherMockRecorder) Encrypt(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCipher)(nil).Encrypt), arg0)
}

// FromBinary mocks base method.
func (m *MockCipher) FromBinary(arg0 []byte) (cipher.Cipher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromBinary", arg0)
	ret0, _ := ret[0].(cipher.Cipher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromBinary indicates an expected call of FromBinary.
func (mr *MockCipherMockRecorder) FromBinary(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromBinary", reflect.TypeOf((*MockCipher)(nil).FromBinary), arg0)
}

// Kind mocks base method.
func (m *MockCipher) Kind() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(string)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockCipherMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockCipher)(nil).Kind))
}

// ToBinary mocks base method.
func (m *MockCipher) ToBinary() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToBinary")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToBinary indicates an expected call of ToBinary.
func (mr *MockCipherMockRecorder) ToBinary() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToBinary", reflect.TypeOf((*MockCipher)(nil).ToBinary))
}
