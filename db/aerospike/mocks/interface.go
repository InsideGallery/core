// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_aerospike is a generated GoMock package.
package mock_aerospike

import (
	reflect "reflect"
	time "time"

	aerospike "github.com/InsideGallery/core/db/aerospike"
	aerospike0 "github.com/aerospike/aerospike-client-go/v7"
	gomock "github.com/golang/mock/gomock"
)

// MockAerospike is a mock of Aerospike interface.
type MockAerospike struct {
	ctrl     *gomock.Controller
	recorder *MockAerospikeMockRecorder
}

// MockAerospikeMockRecorder is the mock recorder for MockAerospike.
type MockAerospikeMockRecorder struct {
	mock *MockAerospike
}

// NewMockAerospike creates a new mock instance.
func NewMockAerospike(ctrl *gomock.Controller) *MockAerospike {
	mock := &MockAerospike{ctrl: ctrl}
	mock.recorder = &MockAerospikeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAerospike) EXPECT() *MockAerospikeMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockAerospike) BatchDelete(policy *aerospike0.BatchPolicy, deletePolicy *aerospike0.BatchDeletePolicy, keys []*aerospike0.Key) ([]*aerospike0.BatchRecord, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", policy, deletePolicy, keys)
	ret0, _ := ret[0].([]*aerospike0.BatchRecord)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockAerospikeMockRecorder) BatchDelete(policy, deletePolicy, keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockAerospike)(nil).BatchDelete), policy, deletePolicy, keys)
}

// BatchGet mocks base method.
func (m *MockAerospike) BatchGet(arg0 *aerospike0.BatchPolicy, arg1 []*aerospike0.Key, arg2 ...string) ([]*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockAerospikeMockRecorder) BatchGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockAerospike)(nil).BatchGet), varargs...)
}

// BatchOperate mocks base method.
func (m *MockAerospike) BatchOperate(policy *aerospike0.BatchPolicy, records []aerospike0.BatchRecordIfc) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOperate", policy, records)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// BatchOperate indicates an expected call of BatchOperate.
func (mr *MockAerospikeMockRecorder) BatchOperate(policy, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOperate", reflect.TypeOf((*MockAerospike)(nil).BatchOperate), policy, records)
}

// CreateComplexIndex mocks base method.
func (m *MockAerospike) CreateComplexIndex(arg0 *aerospike0.WritePolicy, arg1, arg2, arg3, arg4 string, arg5 aerospike0.IndexType, arg6 aerospike0.IndexCollectionType, arg7 ...*aerospike0.CDTContext) (*aerospike0.IndexTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComplexIndex", varargs...)
	ret0, _ := ret[0].(*aerospike0.IndexTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// CreateComplexIndex indicates an expected call of CreateComplexIndex.
func (mr *MockAerospikeMockRecorder) CreateComplexIndex(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplexIndex", reflect.TypeOf((*MockAerospike)(nil).CreateComplexIndex), varargs...)
}

// CreateIndex mocks base method.
func (m *MockAerospike) CreateIndex(arg0 *aerospike0.WritePolicy, arg1, arg2, arg3, arg4 string, arg5 aerospike0.IndexType) (*aerospike0.IndexTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*aerospike0.IndexTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockAerospikeMockRecorder) CreateIndex(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockAerospike)(nil).CreateIndex), arg0, arg1, arg2, arg3, arg4, arg5)
}

// Delete mocks base method.
func (m *MockAerospike) Delete(policy *aerospike0.WritePolicy, key *aerospike0.Key) (bool, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", policy, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAerospikeMockRecorder) Delete(policy, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAerospike)(nil).Delete), policy, key)
}

// DropIndex mocks base method.
func (m *MockAerospike) DropIndex(policy *aerospike0.WritePolicy, namespace, setName, indexName string) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndex", policy, namespace, setName, indexName)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// DropIndex indicates an expected call of DropIndex.
func (mr *MockAerospikeMockRecorder) DropIndex(policy, namespace, setName, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndex", reflect.TypeOf((*MockAerospike)(nil).DropIndex), policy, namespace, setName, indexName)
}

// ExecuteUDF mocks base method.
func (m *MockAerospike) ExecuteUDF(policy *aerospike0.QueryPolicy, statement *aerospike0.Statement, packageName, functionName string, functionArgs ...aerospike0.Value) (*aerospike0.ExecuteTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, statement, packageName, functionName}
	for _, a := range functionArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteUDF", varargs...)
	ret0, _ := ret[0].(*aerospike0.ExecuteTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// ExecuteUDF indicates an expected call of ExecuteUDF.
func (mr *MockAerospikeMockRecorder) ExecuteUDF(policy, statement, packageName, functionName interface{}, functionArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, statement, packageName, functionName}, functionArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUDF", reflect.TypeOf((*MockAerospike)(nil).ExecuteUDF), varargs...)
}

// Exists mocks base method.
func (m *MockAerospike) Exists(policy *aerospike0.BasePolicy, key *aerospike0.Key) (bool, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", policy, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockAerospikeMockRecorder) Exists(policy, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockAerospike)(nil).Exists), policy, key)
}

// Get mocks base method.
func (m *MockAerospike) Get(arg0 *aerospike0.BasePolicy, arg1 *aerospike0.Key, arg2 ...string) (*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAerospikeMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAerospike)(nil).Get), varargs...)
}

// GetNodeNames mocks base method.
func (m *MockAerospike) GetNodeNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetNodeNames indicates an expected call of GetNodeNames.
func (mr *MockAerospikeMockRecorder) GetNodeNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeNames", reflect.TypeOf((*MockAerospike)(nil).GetNodeNames))
}

// IsConnected mocks base method.
func (m *MockAerospike) IsConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConnected indicates an expected call of IsConnected.
func (mr *MockAerospikeMockRecorder) IsConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConnected", reflect.TypeOf((*MockAerospike)(nil).IsConnected))
}

// Operate mocks base method.
func (m *MockAerospike) Operate(arg0 *aerospike0.WritePolicy, arg1 *aerospike0.Key, arg2 ...*aerospike0.Operation) (*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Operate", varargs...)
	ret0, _ := ret[0].(*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Operate indicates an expected call of Operate.
func (mr *MockAerospikeMockRecorder) Operate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operate", reflect.TypeOf((*MockAerospike)(nil).Operate), varargs...)
}

// Put mocks base method.
func (m *MockAerospike) Put(arg0 *aerospike0.WritePolicy, arg1 *aerospike0.Key, arg2 aerospike0.BinMap) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockAerospikeMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockAerospike)(nil).Put), arg0, arg1, arg2)
}

// PutBins mocks base method.
func (m *MockAerospike) PutBins(arg0 *aerospike0.WritePolicy, arg1 *aerospike0.Key, arg2 ...*aerospike0.Bin) aerospike0.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBins", varargs...)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// PutBins indicates an expected call of PutBins.
func (mr *MockAerospikeMockRecorder) PutBins(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBins", reflect.TypeOf((*MockAerospike)(nil).PutBins), varargs...)
}

// Query mocks base method.
func (m *MockAerospike) Query(arg0 *aerospike0.QueryPolicy, arg1 *aerospike0.Statement) (*aerospike0.Recordset, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*aerospike0.Recordset)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockAerospikeMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAerospike)(nil).Query), arg0, arg1)
}

// QueryAggregate mocks base method.
func (m *MockAerospike) QueryAggregate(policy *aerospike0.QueryPolicy, statement *aerospike0.Statement, packageName, functionName string, functionArgs ...aerospike0.Value) (*aerospike0.Recordset, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, statement, packageName, functionName}
	for _, a := range functionArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAggregate", varargs...)
	ret0, _ := ret[0].(*aerospike0.Recordset)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// QueryAggregate indicates an expected call of QueryAggregate.
func (mr *MockAerospikeMockRecorder) QueryAggregate(policy, statement, packageName, functionName interface{}, functionArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, statement, packageName, functionName}, functionArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAggregate", reflect.TypeOf((*MockAerospike)(nil).QueryAggregate), varargs...)
}

// RegisterUDF mocks base method.
func (m *MockAerospike) RegisterUDF(policy *aerospike0.WritePolicy, udfBody []byte, serverPath string, language aerospike0.Language) (*aerospike0.RegisterTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUDF", policy, udfBody, serverPath, language)
	ret0, _ := ret[0].(*aerospike0.RegisterTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// RegisterUDF indicates an expected call of RegisterUDF.
func (mr *MockAerospikeMockRecorder) RegisterUDF(policy, udfBody, serverPath, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUDF", reflect.TypeOf((*MockAerospike)(nil).RegisterUDF), policy, udfBody, serverPath, language)
}

// RegisterUDFFromFile mocks base method.
func (m *MockAerospike) RegisterUDFFromFile(policy *aerospike0.WritePolicy, clientPath, serverPath string, language aerospike0.Language) (*aerospike0.RegisterTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUDFFromFile", policy, clientPath, serverPath, language)
	ret0, _ := ret[0].(*aerospike0.RegisterTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// RegisterUDFFromFile indicates an expected call of RegisterUDFFromFile.
func (mr *MockAerospikeMockRecorder) RegisterUDFFromFile(policy, clientPath, serverPath, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUDFFromFile", reflect.TypeOf((*MockAerospike)(nil).RegisterUDFFromFile), policy, clientPath, serverPath, language)
}

// Stats mocks base method.
func (m *MockAerospike) Stats() (map[string]interface{}, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockAerospikeMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockAerospike)(nil).Stats))
}

// Truncate mocks base method.
func (m *MockAerospike) Truncate(policy *aerospike0.InfoPolicy, namespace, set string, beforeLastUpdate *time.Time) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", policy, namespace, set, beforeLastUpdate)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockAerospikeMockRecorder) Truncate(policy, namespace, set, beforeLastUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockAerospike)(nil).Truncate), policy, namespace, set, beforeLastUpdate)
}

// MockNamespace is a mock of Namespace interface.
type MockNamespace struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceMockRecorder
}

// MockNamespaceMockRecorder is the mock recorder for MockNamespace.
type MockNamespaceMockRecorder struct {
	mock *MockNamespace
}

// NewMockNamespace creates a new mock instance.
func NewMockNamespace(ctrl *gomock.Controller) *MockNamespace {
	mock := &MockNamespace{ctrl: ctrl}
	mock.recorder = &MockNamespaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespace) EXPECT() *MockNamespaceMockRecorder {
	return m.recorder
}

// BatchDelete mocks base method.
func (m *MockNamespace) BatchDelete(policy *aerospike0.BatchPolicy, deletePolicy *aerospike0.BatchDeletePolicy, values []aerospike.SetKey) ([]*aerospike0.BatchRecord, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", policy, deletePolicy, values)
	ret0, _ := ret[0].([]*aerospike0.BatchRecord)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockNamespaceMockRecorder) BatchDelete(policy, deletePolicy, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockNamespace)(nil).BatchDelete), policy, deletePolicy, values)
}

// BatchGet mocks base method.
func (m *MockNamespace) BatchGet(arg0 *aerospike0.BatchPolicy, arg1 []aerospike.SetKey, arg2 ...string) ([]*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockNamespaceMockRecorder) BatchGet(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockNamespace)(nil).BatchGet), varargs...)
}

// BatchOperate mocks base method.
func (m *MockNamespace) BatchOperate(policy *aerospike0.BatchPolicy, records []aerospike0.BatchRecordIfc) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOperate", policy, records)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// BatchOperate indicates an expected call of BatchOperate.
func (mr *MockNamespaceMockRecorder) BatchOperate(policy, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOperate", reflect.TypeOf((*MockNamespace)(nil).BatchOperate), policy, records)
}

// CreateComplexIndex mocks base method.
func (m *MockNamespace) CreateComplexIndex(policy *aerospike0.WritePolicy, set, indexName, field string, indexType aerospike0.IndexType, collectionType aerospike0.IndexCollectionType, ctx ...*aerospike0.CDTContext) (*aerospike0.IndexTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, set, indexName, field, indexType, collectionType}
	for _, a := range ctx {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateComplexIndex", varargs...)
	ret0, _ := ret[0].(*aerospike0.IndexTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// CreateComplexIndex indicates an expected call of CreateComplexIndex.
func (mr *MockNamespaceMockRecorder) CreateComplexIndex(policy, set, indexName, field, indexType, collectionType interface{}, ctx ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, set, indexName, field, indexType, collectionType}, ctx...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComplexIndex", reflect.TypeOf((*MockNamespace)(nil).CreateComplexIndex), varargs...)
}

// CreateIndex mocks base method.
func (m *MockNamespace) CreateIndex(policy *aerospike0.WritePolicy, set, indexName, fieldName string, indexType aerospike0.IndexType) (*aerospike0.IndexTask, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndex", policy, set, indexName, fieldName, indexType)
	ret0, _ := ret[0].(*aerospike0.IndexTask)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// CreateIndex indicates an expected call of CreateIndex.
func (mr *MockNamespaceMockRecorder) CreateIndex(policy, set, indexName, fieldName, indexType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndex", reflect.TypeOf((*MockNamespace)(nil).CreateIndex), policy, set, indexName, fieldName, indexType)
}

// Delete mocks base method.
func (m *MockNamespace) Delete(policy *aerospike0.WritePolicy, setName string, value interface{}) (bool, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", policy, setName, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockNamespaceMockRecorder) Delete(policy, setName, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNamespace)(nil).Delete), policy, setName, value)
}

// DropIndex mocks base method.
func (m *MockNamespace) DropIndex(policy *aerospike0.WritePolicy, setName, indexName string) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropIndex", policy, setName, indexName)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// DropIndex indicates an expected call of DropIndex.
func (mr *MockNamespaceMockRecorder) DropIndex(policy, setName, indexName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropIndex", reflect.TypeOf((*MockNamespace)(nil).DropIndex), policy, setName, indexName)
}

// Exists mocks base method.
func (m *MockNamespace) Exists(arg0 *aerospike0.BasePolicy, arg1 string, arg2 interface{}) (bool, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockNamespaceMockRecorder) Exists(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockNamespace)(nil).Exists), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockNamespace) Get(policy *aerospike0.BasePolicy, setName string, value interface{}, binNames ...string) (*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, setName, value}
	for _, a := range binNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespaceMockRecorder) Get(policy, setName, value interface{}, binNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, setName, value}, binNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespace)(nil).Get), varargs...)
}

// GetConnection mocks base method.
func (m *MockNamespace) GetConnection() aerospike.Aerospike {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection")
	ret0, _ := ret[0].(aerospike.Aerospike)
	return ret0
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockNamespaceMockRecorder) GetConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockNamespace)(nil).GetConnection))
}

// GetNamespace mocks base method.
func (m *MockNamespace) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockNamespaceMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespace)(nil).GetNamespace))
}

// Operate mocks base method.
func (m *MockNamespace) Operate(policy *aerospike0.WritePolicy, setName string, value interface{}, ops ...*aerospike0.Operation) (*aerospike0.Record, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, setName, value}
	for _, a := range ops {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Operate", varargs...)
	ret0, _ := ret[0].(*aerospike0.Record)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Operate indicates an expected call of Operate.
func (mr *MockNamespaceMockRecorder) Operate(policy, setName, value interface{}, ops ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, setName, value}, ops...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Operate", reflect.TypeOf((*MockNamespace)(nil).Operate), varargs...)
}

// Put mocks base method.
func (m *MockNamespace) Put(arg0 *aerospike0.WritePolicy, arg1 string, arg2 interface{}, arg3 aerospike0.BinMap) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockNamespaceMockRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockNamespace)(nil).Put), arg0, arg1, arg2, arg3)
}

// PutBins mocks base method.
func (m *MockNamespace) PutBins(policy *aerospike0.WritePolicy, setName string, value interface{}, bins ...*aerospike0.Bin) aerospike0.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, setName, value}
	for _, a := range bins {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutBins", varargs...)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// PutBins indicates an expected call of PutBins.
func (mr *MockNamespaceMockRecorder) PutBins(policy, setName, value interface{}, bins ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, setName, value}, bins...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutBins", reflect.TypeOf((*MockNamespace)(nil).PutBins), varargs...)
}

// Query mocks base method.
func (m *MockNamespace) Query(arg0 *aerospike0.QueryPolicy, arg1 *aerospike0.Statement) (*aerospike0.Recordset, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*aerospike0.Recordset)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockNamespaceMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockNamespace)(nil).Query), arg0, arg1)
}

// QueryAggregate mocks base method.
func (m *MockNamespace) QueryAggregate(policy *aerospike0.QueryPolicy, statement *aerospike0.Statement, packageName, functionName string, functionArgs ...aerospike0.Value) (*aerospike0.Recordset, aerospike0.Error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{policy, statement, packageName, functionName}
	for _, a := range functionArgs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryAggregate", varargs...)
	ret0, _ := ret[0].(*aerospike0.Recordset)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// QueryAggregate indicates an expected call of QueryAggregate.
func (mr *MockNamespaceMockRecorder) QueryAggregate(policy, statement, packageName, functionName interface{}, functionArgs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{policy, statement, packageName, functionName}, functionArgs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAggregate", reflect.TypeOf((*MockNamespace)(nil).QueryAggregate), varargs...)
}

// Stats mocks base method.
func (m *MockNamespace) Stats() (map[string]interface{}, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockNamespaceMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockNamespace)(nil).Stats))
}

// Truncate mocks base method.
func (m *MockNamespace) Truncate(policy *aerospike0.InfoPolicy, set string, beforeLastUpdate *time.Time) aerospike0.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Truncate", policy, set, beforeLastUpdate)
	ret0, _ := ret[0].(aerospike0.Error)
	return ret0
}

// Truncate indicates an expected call of Truncate.
func (mr *MockNamespaceMockRecorder) Truncate(policy, set, beforeLastUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Truncate", reflect.TypeOf((*MockNamespace)(nil).Truncate), policy, set, beforeLastUpdate)
}
