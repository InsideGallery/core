// Code generated by MockGen. DO NOT EDIT.
// Source: operations.go

// Package mock_entity is a generated GoMock package.
package mock_entity

import (
	reflect "reflect"

	aerospike "github.com/InsideGallery/core/db/aerospike"
	aerospike0 "github.com/aerospike/aerospike-client-go/v7"
	gomock "github.com/golang/mock/gomock"
)

// MockOperations is a mock of Operations interface.
type MockOperations struct {
	ctrl     *gomock.Controller
	recorder *MockOperationsMockRecorder
}

// MockOperationsMockRecorder is the mock recorder for MockOperations.
type MockOperationsMockRecorder struct {
	mock *MockOperations
}

// NewMockOperations creates a new mock instance.
func NewMockOperations(ctrl *gomock.Controller) *MockOperations {
	mock := &MockOperations{ctrl: ctrl}
	mock.recorder = &MockOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperations) EXPECT() *MockOperationsMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockOperations) Execute(arg0 []*aerospike0.Operation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockOperationsMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockOperations)(nil).Execute), arg0)
}

// Exists mocks base method.
func (m *MockOperations) Exists() (bool, aerospike0.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(aerospike0.Error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockOperationsMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockOperations)(nil).Exists))
}

// Get mocks base method.
func (m *MockOperations) Get(bins ...string) (*aerospike0.Record, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range bins {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*aerospike0.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOperationsMockRecorder) Get(bins ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperations)(nil).Get), bins...)
}

// GetBin mocks base method.
func (m *MockOperations) GetBin(binName string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBin", binName)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBin indicates an expected call of GetBin.
func (mr *MockOperationsMockRecorder) GetBin(binName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBin", reflect.TypeOf((*MockOperations)(nil).GetBin), binName)
}

// GetNamespace mocks base method.
func (m *MockOperations) GetNamespace() aerospike.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(aerospike.Namespace)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockOperationsMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockOperations)(nil).GetNamespace))
}
