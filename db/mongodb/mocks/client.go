// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_mongodb is a generated GoMock package.
package mock_mongodb

import (
	context "context"
	reflect "reflect"

	mongodb "github.com/InsideGallery/core/db/mongodb"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockClient) Aggregate(ctx context.Context, collection string, value, pipeline interface{}, opts ...*options.AggregateOptions) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value, pipeline}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Aggregate", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockClientMockRecorder) Aggregate(ctx, collection, value, pipeline interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value, pipeline}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockClient)(nil).Aggregate), varargs...)
}

// BatchUpdateByID mocks base method.
func (m *MockClient) BatchUpdateByID(ctx context.Context, collection string, data map[interface{}]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateByID", ctx, collection, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateByID indicates an expected call of BatchUpdateByID.
func (mr *MockClientMockRecorder) BatchUpdateByID(ctx, collection, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateByID", reflect.TypeOf((*MockClient)(nil).BatchUpdateByID), ctx, collection, data)
}

// Collection mocks base method.
func (m *MockClient) Collection(name string, opts ...*options.CollectionOptions) *mongo.Collection {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(*mongo.Collection)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockClientMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockClient)(nil).Collection), varargs...)
}

// Connection mocks base method.
func (m *MockClient) Connection() *mongo.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*mongo.Client)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockClientMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockClient)(nil).Connection))
}

// CountDocuments mocks base method.
func (m *MockClient) CountDocuments(ctx context.Context, collection string, filter interface{}, opts ...*options.CountOptions) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CountDocuments", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockClientMockRecorder) CountDocuments(ctx, collection, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockClient)(nil).CountDocuments), varargs...)
}

// Database mocks base method.
func (m *MockClient) Database(name string, opts ...*options.DatabaseOptions) *mongo.Database {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Database", varargs...)
	ret0, _ := ret[0].(*mongo.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockClientMockRecorder) Database(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockClient)(nil).Database), varargs...)
}

// DeleteCollection mocks base method.
func (m *MockClient) DeleteCollection(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockClientMockRecorder) DeleteCollection(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockClient)(nil).DeleteCollection), ctx, name)
}

// DeleteMany mocks base method.
func (m *MockClient) DeleteMany(ctx context.Context, collection string, filter interface{}, opts ...*options.DeleteOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteMany", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockClientMockRecorder) DeleteMany(ctx, collection, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockClient)(nil).DeleteMany), varargs...)
}

// DeleteOne mocks base method.
func (m *MockClient) DeleteOne(ctx context.Context, collection string, filter interface{}, opts ...*options.DeleteOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockClientMockRecorder) DeleteOne(ctx, collection, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockClient)(nil).DeleteOne), varargs...)
}

// Drop mocks base method.
func (m *MockClient) Drop(ctx context.Context, collection string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drop", ctx, collection)
	ret0, _ := ret[0].(error)
	return ret0
}

// Drop indicates an expected call of Drop.
func (mr *MockClientMockRecorder) Drop(ctx, collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drop", reflect.TypeOf((*MockClient)(nil).Drop), ctx, collection)
}

// Find mocks base method.
func (m *MockClient) Find(ctx context.Context, collection string, value, filter interface{}, opts ...*options.FindOptions) ([]interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockClientMockRecorder) Find(ctx, collection, value, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockClient)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockClient) FindOne(ctx context.Context, collection string, value, filter interface{}, opts ...*options.FindOneOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockClientMockRecorder) FindOne(ctx, collection, value, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockClient)(nil).FindOne), varargs...)
}

// FindOneByID mocks base method.
func (m *MockClient) FindOneByID(ctx context.Context, collection string, value, id interface{}, opts ...*options.FindOneOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value, id}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOneByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockClientMockRecorder) FindOneByID(ctx, collection, value, id interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value, id}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockClient)(nil).FindOneByID), varargs...)
}

// InsertMany mocks base method.
func (m *MockClient) InsertMany(ctx context.Context, collection string, documents []interface{}, opts ...*options.InsertManyOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, documents}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertMany", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMany indicates an expected call of InsertMany.
func (mr *MockClientMockRecorder) InsertMany(ctx, collection, documents interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, documents}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMany", reflect.TypeOf((*MockClient)(nil).InsertMany), varargs...)
}

// InsertOne mocks base method.
func (m *MockClient) InsertOne(ctx context.Context, collection string, value interface{}, opts ...*options.InsertOneOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockClientMockRecorder) InsertOne(ctx, collection, value interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockClient)(nil).InsertOne), varargs...)
}

// UpdateByObject mocks base method.
func (m *MockClient) UpdateByObject(ctx context.Context, collection string, value, filter interface{}, opts ...*options.UpdateOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, value, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateByObject", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByObject indicates an expected call of UpdateByObject.
func (mr *MockClientMockRecorder) UpdateByObject(ctx, collection, value, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, value, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByObject", reflect.TypeOf((*MockClient)(nil).UpdateByObject), varargs...)
}

// UpsertMany mocks base method.
func (m *MockClient) UpsertMany(ctx context.Context, collection string, keys, documents []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", ctx, collection, keys, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockClientMockRecorder) UpsertMany(ctx, collection, keys, documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockClient)(nil).UpsertMany), ctx, collection, keys, documents)
}

// UpsertManyByFilter mocks base method.
func (m *MockClient) UpsertManyByFilter(ctx context.Context, collection, filterBy string, keys, documents []interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertManyByFilter", ctx, collection, filterBy, keys, documents)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertManyByFilter indicates an expected call of UpsertManyByFilter.
func (mr *MockClientMockRecorder) UpsertManyByFilter(ctx, collection, filterBy, keys, documents interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertManyByFilter", reflect.TypeOf((*MockClient)(nil).UpsertManyByFilter), ctx, collection, filterBy, keys, documents)
}

// UpsertOne mocks base method.
func (m *MockClient) UpsertOne(ctx context.Context, collection string, update, filter interface{}, opts ...*options.UpdateOptions) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, collection, update, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpsertOne", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockClientMockRecorder) UpsertOne(ctx, collection, update, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, collection, update, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockClient)(nil).UpsertOne), varargs...)
}

// WithDB mocks base method.
func (m *MockClient) WithDB(name string) mongodb.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDB", name)
	ret0, _ := ret[0].(mongodb.Client)
	return ret0
}

// WithDB indicates an expected call of WithDB.
func (mr *MockClientMockRecorder) WithDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDB", reflect.TypeOf((*MockClient)(nil).WithDB), name)
}
