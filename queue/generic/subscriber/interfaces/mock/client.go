// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -package mock -source=client.go -destination=mock/client.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	interfaces "github.com/InsideGallery/core/queue/generic/subscriber/interfaces"
	metric "go.opentelemetry.io/otel/metric"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Config mocks base method.
func (m *MockClient) Config() interfaces.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(interfaces.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockClientMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockClient)(nil).Config))
}

// Context mocks base method.
func (m *MockClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockClient)(nil).Context))
}

// Logger mocks base method.
func (m *MockClient) Logger() interfaces.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(interfaces.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockClientMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockClient)(nil).Logger))
}

// Meter mocks base method.
func (m *MockClient) Meter() metric.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meter")
	ret0, _ := ret[0].(metric.Meter)
	return ret0
}

// Meter indicates an expected call of Meter.
func (mr *MockClientMockRecorder) Meter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meter", reflect.TypeOf((*MockClient)(nil).Meter))
}

// QueueSubscribeSync mocks base method.
func (m *MockClient) QueueSubscribeSync(subject, queue string) (interfaces.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueSubscribeSync", subject, queue)
	ret0, _ := ret[0].(interfaces.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueSubscribeSync indicates an expected call of QueueSubscribeSync.
func (mr *MockClientMockRecorder) QueueSubscribeSync(subject, queue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueSubscribeSync", reflect.TypeOf((*MockClient)(nil).QueueSubscribeSync), subject, queue)
}

// WithMeter mocks base method.
func (m *MockClient) WithMeter(arg0 metric.Meter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithMeter", arg0)
}

// WithMeter indicates an expected call of WithMeter.
func (mr *MockClientMockRecorder) WithMeter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMeter", reflect.TypeOf((*MockClient)(nil).WithMeter), arg0)
}
