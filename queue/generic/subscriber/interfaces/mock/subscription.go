// Code generated by MockGen. DO NOT EDIT.
// Source: subscription.go
//
// Generated by this command:
//
//	mockgen -package mock -source=subscription.go -destination=mock/subscription.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	interfaces "github.com/InsideGallery/core/queue/generic/subscriber/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
	isgomock struct{}
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Delivered mocks base method.
func (m *MockSubscription) Delivered() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delivered")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delivered indicates an expected call of Delivered.
func (mr *MockSubscriptionMockRecorder) Delivered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delivered", reflect.TypeOf((*MockSubscription)(nil).Delivered))
}

// Drain mocks base method.
func (m *MockSubscription) Drain() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drain")
	ret0, _ := ret[0].(error)
	return ret0
}

// Drain indicates an expected call of Drain.
func (mr *MockSubscriptionMockRecorder) Drain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drain", reflect.TypeOf((*MockSubscription)(nil).Drain))
}

// Dropped mocks base method.
func (m *MockSubscription) Dropped() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dropped")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dropped indicates an expected call of Dropped.
func (mr *MockSubscriptionMockRecorder) Dropped() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropped", reflect.TypeOf((*MockSubscription)(nil).Dropped))
}

// GetSubject mocks base method.
func (m *MockSubscription) GetSubject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockSubscriptionMockRecorder) GetSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockSubscription)(nil).GetSubject))
}

// NextMsg mocks base method.
func (m *MockSubscription) NextMsg(timeout time.Duration) (interfaces.Msg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextMsg", timeout)
	ret0, _ := ret[0].(interfaces.Msg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextMsg indicates an expected call of NextMsg.
func (mr *MockSubscriptionMockRecorder) NextMsg(timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextMsg", reflect.TypeOf((*MockSubscription)(nil).NextMsg), timeout)
}

// Pending mocks base method.
func (m *MockSubscription) Pending() (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pending indicates an expected call of Pending.
func (mr *MockSubscriptionMockRecorder) Pending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockSubscription)(nil).Pending))
}
