// Code generated by MockGen. DO NOT EDIT.
// Source: meter.go
//
// Generated by this command:
//
//	mockgen -package mock -source=meter.go -destination=mock/meter.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	metric "go.opentelemetry.io/otel/metric"
	gomock "go.uber.org/mock/gomock"
)

// MockMeter is a mock of Meter interface.
type MockMeter struct {
	ctrl     *gomock.Controller
	recorder *MockMeterMockRecorder
	isgomock struct{}
}

// MockMeterMockRecorder is the mock recorder for MockMeter.
type MockMeterMockRecorder struct {
	mock *MockMeter
}

// NewMockMeter creates a new mock instance.
func NewMockMeter(ctrl *gomock.Controller) *MockMeter {
	mock := &MockMeter{ctrl: ctrl}
	mock.recorder = &MockMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeter) EXPECT() *MockMeterMockRecorder {
	return m.recorder
}

// Meter mocks base method.
func (m *MockMeter) Meter() metric.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meter")
	ret0, _ := ret[0].(metric.Meter)
	return ret0
}

// Meter indicates an expected call of Meter.
func (mr *MockMeterMockRecorder) Meter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meter", reflect.TypeOf((*MockMeter)(nil).Meter))
}

// WithMeter mocks base method.
func (m *MockMeter) WithMeter(arg0 metric.Meter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithMeter", arg0)
}

// WithMeter indicates an expected call of WithMeter.
func (mr *MockMeterMockRecorder) WithMeter(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMeter", reflect.TypeOf((*MockMeter)(nil).WithMeter), arg0)
}
