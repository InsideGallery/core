// Code generated by MockGen. DO NOT EDIT.
// Source: msg.go
//
// Generated by this command:
//
//	mockgen -package mock -source=msg.go -destination=mock/msg.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	interfaces "github.com/InsideGallery/core/queue/generic/subscriber/interfaces"
	gomock "go.uber.org/mock/gomock"
)

// MockMsg is a mock of Msg interface.
type MockMsg struct {
	ctrl     *gomock.Controller
	recorder *MockMsgMockRecorder
	isgomock struct{}
}

// MockMsgMockRecorder is the mock recorder for MockMsg.
type MockMsgMockRecorder struct {
	mock *MockMsg
}

// NewMockMsg creates a new mock instance.
func NewMockMsg(ctrl *gomock.Controller) *MockMsg {
	mock := &MockMsg{ctrl: ctrl}
	mock.recorder = &MockMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsg) EXPECT() *MockMsgMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockMsg) Copy(subject string) interfaces.Msg {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", subject)
	ret0, _ := ret[0].(interfaces.Msg)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockMsgMockRecorder) Copy(subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockMsg)(nil).Copy), subject)
}

// GetData mocks base method.
func (m *MockMsg) GetData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockMsgMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockMsg)(nil).GetData))
}

// GetHeader mocks base method.
func (m *MockMsg) GetHeader() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockMsgMockRecorder) GetHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockMsg)(nil).GetHeader))
}

// GetSubject mocks base method.
func (m *MockMsg) GetSubject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MockMsgMockRecorder) GetSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*MockMsg)(nil).GetSubject))
}

// IsReply mocks base method.
func (m *MockMsg) IsReply() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReply")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReply indicates an expected call of IsReply.
func (mr *MockMsgMockRecorder) IsReply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReply", reflect.TypeOf((*MockMsg)(nil).IsReply))
}

// ReplyTo mocks base method.
func (m *MockMsg) ReplyTo() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTo")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReplyTo indicates an expected call of ReplyTo.
func (mr *MockMsgMockRecorder) ReplyTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTo", reflect.TypeOf((*MockMsg)(nil).ReplyTo))
}

// Respond mocks base method.
func (m *MockMsg) Respond(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Respond", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Respond indicates an expected call of Respond.
func (mr *MockMsgMockRecorder) Respond(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockMsg)(nil).Respond), arg0)
}

// RespondMsg mocks base method.
func (m *MockMsg) RespondMsg(arg0 interfaces.Msg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RespondMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RespondMsg indicates an expected call of RespondMsg.
func (mr *MockMsgMockRecorder) RespondMsg(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RespondMsg", reflect.TypeOf((*MockMsg)(nil).RespondMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockMsg) SetHeader(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHeader", key, value)
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMsgMockRecorder) SetHeader(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMsg)(nil).SetHeader), key, value)
}
