// Code generated by MockGen. DO NOT EDIT.
// Source: config.go
//
// Generated by this command:
//
//	mockgen -package mock -source=config.go -destination=mock/config.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockConfig is a mock of Config interface.
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
	isgomock struct{}
}

// MockConfigMockRecorder is the mock recorder for MockConfig.
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance.
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// GetConcurrentSize mocks base method.
func (m *MockConfig) GetConcurrentSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcurrentSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetConcurrentSize indicates an expected call of GetConcurrentSize.
func (mr *MockConfigMockRecorder) GetConcurrentSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcurrentSize", reflect.TypeOf((*MockConfig)(nil).GetConcurrentSize))
}

// GetMaxConcurrentSize mocks base method.
func (m *MockConfig) GetMaxConcurrentSize() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxConcurrentSize")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxConcurrentSize indicates an expected call of GetMaxConcurrentSize.
func (mr *MockConfigMockRecorder) GetMaxConcurrentSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxConcurrentSize", reflect.TypeOf((*MockConfig)(nil).GetMaxConcurrentSize))
}

// GetReadTimeout mocks base method.
func (m *MockConfig) GetReadTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetReadTimeout indicates an expected call of GetReadTimeout.
func (mr *MockConfigMockRecorder) GetReadTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadTimeout", reflect.TypeOf((*MockConfig)(nil).GetReadTimeout))
}
