// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package mock -source=interface.go -destination=mock/proxy.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockNATSPopulator is a mock of NATSPopulator interface.
type MockNATSPopulator struct {
	ctrl     *gomock.Controller
	recorder *MockNATSPopulatorMockRecorder
	isgomock struct{}
}

// MockNATSPopulatorMockRecorder is the mock recorder for MockNATSPopulator.
type MockNATSPopulatorMockRecorder struct {
	mock *MockNATSPopulator
}

// NewMockNATSPopulator creates a new mock instance.
func NewMockNATSPopulator(ctrl *gomock.Controller) *MockNATSPopulator {
	mock := &MockNATSPopulator{ctrl: ctrl}
	mock.recorder = &MockNATSPopulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSPopulator) EXPECT() *MockNATSPopulatorMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNATSPopulator) Publish(subj string, msg []byte, headers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNATSPopulatorMockRecorder) Publish(subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNATSPopulator)(nil).Publish), varargs...)
}

// PublishWithContext mocks base method.
func (m *MockNATSPopulator) PublishWithContext(ctx context.Context, subj string, msg []byte, headers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockNATSPopulatorMockRecorder) PublishWithContext(ctx, subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockNATSPopulator)(nil).PublishWithContext), varargs...)
}

// Requester mocks base method.
func (m *MockNATSPopulator) Requester(subj string, data []byte, timeout time.Duration, headers ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{subj, data, timeout}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Requester", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Requester indicates an expected call of Requester.
func (mr *MockNATSPopulatorMockRecorder) Requester(subj, data, timeout any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subj, data, timeout}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requester", reflect.TypeOf((*MockNATSPopulator)(nil).Requester), varargs...)
}

// RequesterWithContext mocks base method.
func (m *MockNATSPopulator) RequesterWithContext(ctx context.Context, subj string, msg []byte, headers ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequesterWithContext", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequesterWithContext indicates an expected call of RequesterWithContext.
func (mr *MockNATSPopulatorMockRecorder) RequesterWithContext(ctx, subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequesterWithContext", reflect.TypeOf((*MockNATSPopulator)(nil).RequesterWithContext), varargs...)
}

// MockNATSPublisher is a mock of NATSPublisher interface.
type MockNATSPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockNATSPublisherMockRecorder
	isgomock struct{}
}

// MockNATSPublisherMockRecorder is the mock recorder for MockNATSPublisher.
type MockNATSPublisherMockRecorder struct {
	mock *MockNATSPublisher
}

// NewMockNATSPublisher creates a new mock instance.
func NewMockNATSPublisher(ctrl *gomock.Controller) *MockNATSPublisher {
	mock := &MockNATSPublisher{ctrl: ctrl}
	mock.recorder = &MockNATSPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSPublisher) EXPECT() *MockNATSPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockNATSPublisher) Publish(subj string, msg []byte, headers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNATSPublisherMockRecorder) Publish(subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNATSPublisher)(nil).Publish), varargs...)
}

// PublishWithContext mocks base method.
func (m *MockNATSPublisher) PublishWithContext(ctx context.Context, subj string, msg []byte, headers ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishWithContext indicates an expected call of PublishWithContext.
func (mr *MockNATSPublisherMockRecorder) PublishWithContext(ctx, subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWithContext", reflect.TypeOf((*MockNATSPublisher)(nil).PublishWithContext), varargs...)
}

// MockNATSRequester is a mock of NATSRequester interface.
type MockNATSRequester struct {
	ctrl     *gomock.Controller
	recorder *MockNATSRequesterMockRecorder
	isgomock struct{}
}

// MockNATSRequesterMockRecorder is the mock recorder for MockNATSRequester.
type MockNATSRequesterMockRecorder struct {
	mock *MockNATSRequester
}

// NewMockNATSRequester creates a new mock instance.
func NewMockNATSRequester(ctrl *gomock.Controller) *MockNATSRequester {
	mock := &MockNATSRequester{ctrl: ctrl}
	mock.recorder = &MockNATSRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNATSRequester) EXPECT() *MockNATSRequesterMockRecorder {
	return m.recorder
}

// Requester mocks base method.
func (m *MockNATSRequester) Requester(subj string, data []byte, timeout time.Duration, headers ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{subj, data, timeout}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Requester", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Requester indicates an expected call of Requester.
func (mr *MockNATSRequesterMockRecorder) Requester(subj, data, timeout any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{subj, data, timeout}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Requester", reflect.TypeOf((*MockNATSRequester)(nil).Requester), varargs...)
}

// RequesterWithContext mocks base method.
func (m *MockNATSRequester) RequesterWithContext(ctx context.Context, subj string, msg []byte, headers ...string) ([]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, subj, msg}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequesterWithContext", varargs...)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequesterWithContext indicates an expected call of RequesterWithContext.
func (mr *MockNATSRequesterMockRecorder) RequesterWithContext(ctx, subj, msg any, headers ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, subj, msg}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequesterWithContext", reflect.TypeOf((*MockNATSRequester)(nil).RequesterWithContext), varargs...)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorage) Add(group, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", group, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStorageMockRecorder) Add(group, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorage)(nil).Add), group, id)
}

// Delete mocks base method.
func (m *MockStorage) Delete(group, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", group, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(group, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), group, id)
}

// DeleteByID mocks base method.
func (m *MockStorage) DeleteByID(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockStorageMockRecorder) DeleteByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockStorage)(nil).DeleteByID), id)
}

// GetIDs mocks base method.
func (m *MockStorage) GetIDs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetIDs indicates an expected call of GetIDs.
func (mr *MockStorageMockRecorder) GetIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDs", reflect.TypeOf((*MockStorage)(nil).GetIDs))
}

// GetKeys mocks base method.
func (m *MockStorage) GetKeys(group string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeys", group)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetKeys indicates an expected call of GetKeys.
func (mr *MockStorageMockRecorder) GetKeys(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeys", reflect.TypeOf((*MockStorage)(nil).GetKeys), group)
}

// Size mocks base method.
func (m *MockStorage) Size(group string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", group)
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockStorageMockRecorder) Size(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockStorage)(nil).Size), group)
}
